// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace RpcPackage {
  /// <summary>
  ///  The greeting service definition.
  /// </summary>
  public static class RpcService
  {
    static readonly string __ServiceName = "RpcPackage.RpcService";

    static readonly Marshaller<global::RpcPackage.HelloRequest> __Marshaller_HelloRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.HelloRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.HelloReply> __Marshaller_HelloReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.HelloReply.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.SumRequest> __Marshaller_SumRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.SumRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.SumReply> __Marshaller_SumReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.SumReply.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.TestRequest> __Marshaller_TestRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.TestRequest.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.TestReply> __Marshaller_TestReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.TestReply.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.GroupResponseModelRpc_Request> __Marshaller_GroupResponseModelRpc_Request = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.GroupResponseModelRpc_Request.Parser.ParseFrom);
    static readonly Marshaller<global::RpcPackage.ServerReply> __Marshaller_ServerReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcPackage.ServerReply.Parser.ParseFrom);

    static readonly Method<global::RpcPackage.HelloRequest, global::RpcPackage.HelloReply> __Method_SayHello = new Method<global::RpcPackage.HelloRequest, global::RpcPackage.HelloReply>(
        MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    static readonly Method<global::RpcPackage.HelloRequest, global::RpcPackage.HelloReply> __Method_SayHelloAgain = new Method<global::RpcPackage.HelloRequest, global::RpcPackage.HelloReply>(
        MethodType.Unary,
        __ServiceName,
        "SayHelloAgain",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    static readonly Method<global::RpcPackage.SumRequest, global::RpcPackage.SumReply> __Method_MySum = new Method<global::RpcPackage.SumRequest, global::RpcPackage.SumReply>(
        MethodType.Unary,
        __ServiceName,
        "MySum",
        __Marshaller_SumRequest,
        __Marshaller_SumReply);

    static readonly Method<global::RpcPackage.TestRequest, global::RpcPackage.TestReply> __Method_TestConnection = new Method<global::RpcPackage.TestRequest, global::RpcPackage.TestReply>(
        MethodType.Unary,
        __ServiceName,
        "TestConnection",
        __Marshaller_TestRequest,
        __Marshaller_TestReply);

    static readonly Method<global::RpcPackage.GroupResponseModelRpc_Request, global::RpcPackage.ServerReply> __Method_ReceiveGroupTags = new Method<global::RpcPackage.GroupResponseModelRpc_Request, global::RpcPackage.ServerReply>(
        MethodType.Unary,
        __ServiceName,
        "ReceiveGroupTags",
        __Marshaller_GroupResponseModelRpc_Request,
        __Marshaller_ServerReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RpcPackage.RpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RpcService</summary>
    public abstract class RpcServiceBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::RpcPackage.HelloReply> SayHello(global::RpcPackage.HelloRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcPackage.HelloReply> SayHelloAgain(global::RpcPackage.HelloRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcPackage.SumReply> MySum(global::RpcPackage.SumRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcPackage.TestReply> TestConnection(global::RpcPackage.TestRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcPackage.ServerReply> ReceiveGroupTags(global::RpcPackage.GroupResponseModelRpc_Request request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RpcService</summary>
    public class RpcServiceClient : ClientBase<RpcServiceClient>
    {
      /// <summary>Creates a new client for RpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RpcServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RpcServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::RpcPackage.HelloReply SayHello(global::RpcPackage.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHello(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::RpcPackage.HelloReply SayHello(global::RpcPackage.HelloRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcPackage.HelloReply> SayHelloAsync(global::RpcPackage.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHelloAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcPackage.HelloReply> SayHelloAsync(global::RpcPackage.HelloRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      public virtual global::RpcPackage.HelloReply SayHelloAgain(global::RpcPackage.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHelloAgain(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcPackage.HelloReply SayHelloAgain(global::RpcPackage.HelloRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcPackage.HelloReply> SayHelloAgainAsync(global::RpcPackage.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SayHelloAgainAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcPackage.HelloReply> SayHelloAgainAsync(global::RpcPackage.HelloRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      public virtual global::RpcPackage.SumReply MySum(global::RpcPackage.SumRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MySum(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcPackage.SumReply MySum(global::RpcPackage.SumRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MySum, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcPackage.SumReply> MySumAsync(global::RpcPackage.SumRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MySumAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcPackage.SumReply> MySumAsync(global::RpcPackage.SumRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MySum, null, options, request);
      }
      public virtual global::RpcPackage.TestReply TestConnection(global::RpcPackage.TestRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestConnection(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcPackage.TestReply TestConnection(global::RpcPackage.TestRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestConnection, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcPackage.TestReply> TestConnectionAsync(global::RpcPackage.TestRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestConnectionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcPackage.TestReply> TestConnectionAsync(global::RpcPackage.TestRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestConnection, null, options, request);
      }
      public virtual global::RpcPackage.ServerReply ReceiveGroupTags(global::RpcPackage.GroupResponseModelRpc_Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReceiveGroupTags(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcPackage.ServerReply ReceiveGroupTags(global::RpcPackage.GroupResponseModelRpc_Request request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReceiveGroupTags, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcPackage.ServerReply> ReceiveGroupTagsAsync(global::RpcPackage.GroupResponseModelRpc_Request request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReceiveGroupTagsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcPackage.ServerReply> ReceiveGroupTagsAsync(global::RpcPackage.GroupResponseModelRpc_Request request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReceiveGroupTags, null, options, request);
      }
      protected override RpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(RpcServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_SayHelloAgain, serviceImpl.SayHelloAgain)
          .AddMethod(__Method_MySum, serviceImpl.MySum)
          .AddMethod(__Method_TestConnection, serviceImpl.TestConnection)
          .AddMethod(__Method_ReceiveGroupTags, serviceImpl.ReceiveGroupTags).Build();
    }

  }
}
#endregion
